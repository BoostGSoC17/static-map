#          Copyright Tom Westerhout 2017.
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

import testing ;
import os ;
import path ;
import property-set ;
import errors ;


local boost-root ;
# if BOOST_ROOT {
#     # Build as part of Boost. Jamroot defines BOOST_ROOT path constant.
#     ECHO $(BOOST_ROOT) ;
#     boost-root = $(BOOST_ROOT) ;
# }
# else {
    # Standalone build.
#     ECHO $(BOOST_ROOT) ;
    boost-root = [ os.environ BOOST_ROOT ] ;
# }

local .gcc-warnings = -W -Wall -Wextra -pedantic -Wcast-align 
                      -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization 
                      -Wformat=2 -Winit-self -Wlogical-op -Wmissing-include-dirs 
                      -Woverloaded-virtual -Wredundant-decls
                      -Wshadow -Wsign-promo -Wstrict-null-sentinel
                      -Wstrict-overflow=5
                      -Wvariadic-macros 
                      -Wparentheses 
# -Wno-noexcept
#                      -Wno-noexcept-type
                    ;

local .clang-warnings = -W -Weverything
                        -Wno-c++98-compat
                        -Wno-c++98-compat-pedantic
                        -Wno-documentation-unknown-command
                        -Wno-documentation
                        -Wno-missing-prototypes
                        -Wno-missing-variable-declarations
                        -Wno-reserved-id-macro
                        -Wno-padded
                        -Wno-assume
                        # -Wno-undef
                        # -Wno-old-style-cast
                        -Wno-weak-vtables ;

project
    : requirements <include>../include
                   <include>$(boost-root)
                   <warnings>all
                   # <warnings-as-errors>on
                   <exception-handling>on
                   # Enable exceptions on Windows
                   <host-os>windows,<toolset>clang:<cxxflags>"-fexceptions"
                   # Add some extra warnings' flags for GCC
                   <toolset>gcc:<cxxflags>$(.gcc-warnings:J=" ")
                   <toolset>clang:<cxxflags>$(.clang-warnings:J=" ")
                   <toolset>gcc:<cxxflags>"-ftemplate-depth=1000"
    ;


alias static_views_tests : correctness ;
# headers correctness optimisation ;

alias minimal : static_views_tests ;
alias ful     : static_views_tests ;
alias extra   : static_views_tests ;
