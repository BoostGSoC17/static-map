<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structdetail_1_1make__wrapper__impl" kind="struct" language="C++" prot="public">
    <compoundname>detail::make_wrapper_impl</compoundname>
    <includes refid="wrapper_8hpp" local="no">wrapper.hpp</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="structdetail_1_1make__wrapper__impl_1a72b8589b0c616f385f5c973507a5cf47" prot="private" static="no">
        <type>std::integral_constant&lt; bool, std::is_lvalue_reference&lt; T &gt;::value||std::is_move_constructible&lt; std::decay_t&lt; T &gt; &gt;::value &gt;</type>
        <definition>using detail::make_wrapper_impl::reference_or_move_constructible =  std::integral_constant&lt; bool, std::is_lvalue_reference&lt;T&gt;::value || std::is_move_constructible&lt;std::decay_t&lt;T&gt; &gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>reference_or_move_constructible</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" line="245" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structdetail_1_1make__wrapper__impl_1a44d26013551aa7968321ab4c33890f01" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::make_wrapper_impl::call_impl</definition>
        <argsstring>(T &amp;&amp;, std::false_type) const noexcept</argsstring>
        <name>call_impl</name>
        <param>
          <type>T &amp;&amp;</type>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" line="253" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" bodystart="253" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="structdetail_1_1make__wrapper__impl_1a8d7d3ae57cd161ee97bedd4f0260b446" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::make_wrapper_impl::call_impl</definition>
        <argsstring>(T &amp;&amp;x, std::true_type) const noexcept(detail::wrapper&lt; decltype(x)&gt;{std::forward&lt; T &gt;(x)})(whenever possible)</argsstring>
        <name>call_impl</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" line="270" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" bodystart="270" bodyend="276"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdetail_1_1make__wrapper__impl_1aff9a7988e2653ccf1f2d11031f3a3833" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto detail::make_wrapper_impl::operator()</definition>
        <argsstring>(T &amp;&amp;x) const noexcept(std::declval&lt; make_wrapper_impl const &amp;&gt;().call_impl(std::forward&lt; T &gt;(x), reference_or_move_constructible&lt; decltype(x)&gt;{}))(whenever possible)</argsstring>
        <name>operator()</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" line="284" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" bodystart="284" bodyend="293"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" line="239" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" bodystart="239" bodyend="295"/>
    <listofallmembers>
      <member refid="structdetail_1_1make__wrapper__impl_1a44d26013551aa7968321ab4c33890f01" prot="private" virt="non-virtual"><scope>detail::make_wrapper_impl</scope><name>call_impl</name></member>
      <member refid="structdetail_1_1make__wrapper__impl_1a8d7d3ae57cd161ee97bedd4f0260b446" prot="private" virt="non-virtual"><scope>detail::make_wrapper_impl</scope><name>call_impl</name></member>
      <member refid="structdetail_1_1make__wrapper__impl_1aff9a7988e2653ccf1f2d11031f3a3833" prot="public" virt="non-virtual"><scope>detail::make_wrapper_impl</scope><name>operator()</name></member>
      <member refid="structdetail_1_1make__wrapper__impl_1a72b8589b0c616f385f5c973507a5cf47" prot="private" virt="non-virtual"><scope>detail::make_wrapper_impl</scope><name>reference_or_move_constructible</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
