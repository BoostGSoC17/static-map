<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structdetail_1_1wrapper" kind="struct" language="C++" prot="public">
    <compoundname>detail::wrapper</compoundname>
    <includes refid="wrapper_8hpp" local="no">wrapper.hpp</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
    <briefdescription>
<para>Wraps an lvalue or an rvalue reference. </para>    </briefdescription>
    <detaileddescription>
<para><verbatim>embed:rst:leading-slashes
/// This is basically a ``constexpr`` version of
/// |reference_wrapper|_. The difference is that
/// :cpp:class:`detail::wrapper` can wrap both lvalue and rvalue
/// references. This is just syntactic sugar.
///
/// .. |reference_wrapper| replace:: ``std::reference_wrapper``
/// .. _reference_wrapper: http://en.cppreference.com/w/cpp/utility/functional/reference_wrapper
///
/// .. code-block:: cpp
///
///   template &lt;class T&gt;
///   struct wrapper {
///       ... // copy and move constructors/assignment operators
///
///       constexpr auto get() const&amp; noexcept(whenever possible);
///       constexpr auto get() &amp;      noexcept(whenever possible);
///       constexpr auto get() &amp;&amp;     noexcept(whenever possible);
///
///       template &lt;class... Args&gt;
///       constexpr auto operator() (Args&amp;&amp;...) const
///           noexcept(whenever possible);
///   };
///
/// Constructors are intentionally not listed. Use
/// :cpp:var:`make_wrapper(T&amp;&amp;) &lt;make_wrapper&gt;` to create wrappers.
/// </verbatim> </para>    </detaileddescription>
    <location file="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" line="51" column="1" bodyfile="/home/tom/GSoC2017/static-views/include/boost/static_views/detail/wrapper.hpp" bodystart="51" bodyend="-1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
